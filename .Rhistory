controls = "fibroblasts",
chrs = c("21", "22")
)
# and first 3 GTEx control samples to save space
junctions_example <- junctions_example[, c(1:5)]
usethis::use_data(junctions_example, compress = "xz")
junctions <- junctions_example
# keep in all junctions by default
junc_filter <- !logical(length = length(junctions))
junc_filter
print(stringr::str_c(Sys.time(), " - Filtering junctions..."))
count_thresh = 5
n_samp = 1
junctions
junctions
count_thresh = c("raw_count" = 5)
junctions %>%
assays()
junctions %>%
SummarizedExperiment::assays()
i = 1
junctions %>%
SummarizedExperiment::assays() %>%
.[[names(count_thresh)[i]]]
names(count_thresh)[i]
SummarizedExperiment
junctions
library(dasper)
junctions_example_1_path <- system.file("extdata", "junctions_example_1.txt", package = "dasper", mustWork = TRUE)
junctions_example_2_path <- system.file("extdata", "junctions_example_2.txt", package = "dasper", mustWork = TRUE)
# only take chr21 + 22
junctions_example <-
junction_load(
junction_paths = c(junctions_example_1_path, junctions_example_2_path),
controls = "fibroblasts",
chrs = c("21", "22")
)
# and first 3 GTEx control samples to save space
junctions_example <- junctions_example[, c(1:5)]
usethis::use_data(junctions_example, compress = "xz")
junctions_example
source('~/packages/dasper/dev/04_update.R', echo=TRUE)
devtools::load_all(".")
junctions = junctions_example
count_thresh = c("raw" = 5)
n_samp = 1
n_samp = c("raw" = 1)
# keep in all junctions by default
junc_filter <- !logical(length = length(junctions))
count_thresh
n_samp
junctions
junctions %>%
SummarizedExperiment::assays() %>%
.[[names(count_thresh)[i]]]
i = 1
junctions %>%
SummarizedExperiment::assays() %>%
.[[names(count_thresh)[i]]]
junctions %>%
SummarizedExperiment::assays() %>%
.[[names(count_thresh)[i]]] %>%
apply(
MARGIN = 1,
FUN = function(x, count_thresh){ sum(x >= count_thresh) },
count_thresh = count_thresh[i]
)
count_filter <-
junctions %>%
SummarizedExperiment::assays() %>%
.[[names(count_thresh)[i]]] %>%
apply(
MARGIN = 1,
FUN = function(x, count_thresh){ sum(x >= count_thresh) },
count_thresh = count_thresh[i]
)
count_filter
count_filter <- count_filter >= n_samp
count_filter
logical(1:length(junctions))
junctions
logical(1:nrow(junctions))
logical(1:nrow(junctions))
dim(junctions)
dim(junctions)[1]
count_filter <- !logical(dim(junctions)[1])
count_filter
count_filter & count_filter
for (i in seq_along(count_thresh)) {
# how many samples for each junction have a count above count_thresh
count_filter <-
junctions %>%
SummarizedExperiment::assays() %>%
.[[names(count_thresh)[i]]] %>%
apply(
MARGIN = 1,
FUN = function(x, count_thresh){ sum(x >= count_thresh) },
count_thresh = count_thresh[i]
)
count_filter <- count_filter >= n_samp
count_filter_all <- count_filter_all & count_filter
}
count_filter_all <- !logical(dim(junctions)[1])
for (i in seq_along(count_thresh)) {
# how many samples for each junction have a count above count_thresh
count_filter <-
junctions %>%
SummarizedExperiment::assays() %>%
.[[names(count_thresh)[i]]] %>%
apply(
MARGIN = 1,
FUN = function(x, count_thresh){ sum(x >= count_thresh) },
count_thresh = count_thresh[i]
)
count_filter <- count_filter >= n_samp
count_filter_all <- count_filter_all & count_filter
}
count_filter_all
# keep in all junctions by default
junctions_filter <- !logical(length = length(junctions))
count_filter <- .get_count_filter(raw_count, count_thresh, n_samp)
junctions_filter <- junc_filter & count_filter
count_filter <- .junction_filter_count(raw_count, count_thresh, n_samp)
count_filter <- .junction_filter_count(junctions, count_thresh, n_samp)
devtools::load_all(".")
if (!is.null(count_thresh)) {
count_filter <- .junction_filter_count(junctions, count_thresh, n_samp)
junctions_filter <- junc_filter & count_filter
}
.junction_filter_count
#' \code{.junction_filter_count} obtains a logical vector with TRUE marking the
#' junctions that are above the count filter specified.
#'
#' @inheritParams junction_filter
#'
#' @return logical vector with TRUE meaning the junction has passed the count
#'   filter.
#'
#' @keywords internal
#' @noRd
.junction_filter_count <- function(junctions, count_thresh, n_samp) {
count_filter_all <- !logical(dim(junctions)[1])
for (i in seq_along(count_thresh)) {
# how many samples for each junction have a count above count_thresh
count_filter <-
junctions %>%
SummarizedExperiment::assays() %>%
.[[names(count_thresh)[i]]] %>%
apply(
MARGIN = 1,
FUN = function(x, count_thresh){ sum(x >= count_thresh) },
count_thresh = count_thresh[i]
)
count_filter <- count_filter >= n_samp
count_filter_all <- count_filter_all & count_filter
}
return(count_filter_all)
}
count_filter <- .junction_filter_count(junctions, count_thresh, n_samp)
count_filter
junctions_filter <- junc_filter & count_filter
junctions_filter
width_range = c(20, 1000000)
width_filter <- (width(junctions) >= width_range[1]) & (width(junctions) <= width_range[2])
width_filter
junc_filter <- junc_filter & width_filter
junc_filter
junctions_filter <- junc_filter & width_filter
# by count
if (!is.null(count_thresh)) {
count_filter <- .junction_filter_count(junctions, count_thresh, n_samp)
junctions_filter <- junc_filter & count_filter
}
# by width
if (!is.null(width_range)) {
width_filter <- (width(junctions) >= width_range[1]) & (width(junctions) <= width_range[2])
junctions_filter <- junctions_filter & width_filter
}
junctions_filter
# by width
if (!is.null(width_range)) {
width_filter <- (width(junctions) >= width_range[1]) & (width(junctions) <= width_range[2])
junctions_filter <- junctions_filter & width_filter
}
# by type
if (!is.null(type)) {
# check that user has inputted junction categories that are expected
exp_junc_cats <- c("annotated",
"novel_acceptor",
"novel_donor",
"novel_exon_skip",
"novel_combo",
"ambig_gene",
"unannotated")
mismatch <- junc_cats[!(junc_cats %in% exp_junc_cats)]
if (length(mismatch) != 0) {
warning(stringr::str_c(
"The following junction categories are not expected so ignored:\n",
stringr::str_c(mismatch, collapse = ", ")
))
}
junc_filter <- junc_filter & !(mcols(junc_metadata)[["type"]] %in% junc_cats)
}
type = c("ambig_gene", "unannotated")
# by type
if (!is.null(type)) {
# check that user has inputted junction categories that are expected
exp_junc_cats <- c("annotated",
"novel_acceptor",
"novel_donor",
"novel_exon_skip",
"novel_combo",
"ambig_gene",
"unannotated")
mismatch <- junc_cats[!(junc_cats %in% exp_junc_cats)]
if (length(mismatch) != 0) {
warning(stringr::str_c(
"The following junction categories are not expected so ignored:\n",
stringr::str_c(mismatch, collapse = ", ")
))
}
junc_filter <- junc_filter & !(mcols(junc_metadata)[["type"]] %in% junc_cats)
}
mcols(junc_metadata)[["type"]] %in% junc_cats
mcols(junctions)[["type"]] %in% junc_cats
mcols(junctions)[["type"]] %in% type
type
mcols(junctions)[["type"]]
mcols(junctions)
junctions
# keep in all junctions by default
junctions_filter <- !logical(length = length(junctions))
print(stringr::str_c(Sys.time(), " - Filtering junctions..."))
# by count
if (!is.null(count_thresh)) {
count_filter <- .junction_filter_count(junctions, count_thresh, n_samp)
junctions_filter <- junc_filter & count_filter
}
# by width
if (!is.null(width_range)) {
width_filter <- (width(junctions) >= width_range[1]) & (width(junctions) <= width_range[2])
junctions_filter <- junctions_filter & width_filter
}
junctions <- junctions[junctions_filter]
junctions
mcols(junctions)
junctions_example
devtools::load_all(".")
rm(list = c(".junction_filter_count"))
by_count <- junction_filter(junctions_example,
count_thresh = c("raw" = 5),
n_samp = c("raw" = 1),
types = NULL)
devtools::load_all(".")
by_count <- junction_filter(junctions_example,
count_thresh = c("raw" = 5),
n_samp = c("raw" = 1),
types = NULL)
by_count
by_count
SummarizedExperiment::assays(by_count)[["raw"]]
by_width <- junction_filter(junctions_example,
count_thresh = NULL,
n_samp = NULL,
width_range = c(20, 1000),
types = NULL)
by_width
by_width <- junction_filter(junctions_example,
count_thresh = NULL,
n_samp = NULL,
types = c("ambig_gene", "unannotated"))
devtools::load_all(".")
by_width <- junction_filter(junctions_example,
count_thresh = NULL,
n_samp = NULL,
types = c("ambig_gene", "unannotated"))
suppressWarnings(expr = {
ref <- GenomicFeatures::makeTxDbFromGFF("ftp://ftp.ensembl.org/pub/release-100/gtf/homo_sapiens/Homo_sapiens.GRCh38.100.gtf.gz")
})
junctions <- junction_annot(junctions_example, ref)
junctions <- junction_annot(junctions_example, ref)
by_type <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = c("ambig_gene", "unannotated"))
junctions
by_type <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = c("ambig_gene", "unannotated"))
devtools::load_all(".")
by_type <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = c("ambig_gene", "unannotated"))
by_type
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges("21:1:100000"))
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges("21:1:100000"))
GRanges("21:1:100000", strand = "*")
GRanges("21:1:100000", strand = "*")
GRanges(seqnames = "21", ranges = "1:100000", strand = "*")
GRanges(seqnames = "21", ranges = "1-100000", strand = "*")
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges(seqnames = "21", ranges = "1-100000", strand = "*"))
devtools::load_all(".")
SummarizedExperiment::assays(by_count)[["raw"]]
,
by_all <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = c("ambig_gene", "unannotated"))
by_all
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges(seqnames = "21", ranges = "1-100000", strand = "*"))
devtools::load_all(".")
by_region
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges(seqnames = "21", ranges = "1-100000", strand = "*"))
by_region
by_region %>% rowRanges()
by_region %>% SummarizedExperiment::rowRanges()
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges(seqnames = "21", ranges = "1-1000000", strand = "*"))
by_region
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges(seqnames = "21", ranges = "1-10000000", strand = "*"))
by_region
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges(seqnames = "21", ranges = "1-100000000", strand = "*"))
by_region
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges(seqnames = "21", ranges = "1-1000000000", strand = "*"))
by_region
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges(seqnames = "21", ranges = "1-10000000", strand = "*"))
by_region
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges(seqnames = "21", ranges = "1-100000000", strand = "*"))
by_region
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges(seqnames = "21", ranges = "1-50000000", strand = "*"))
by_region
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges(seqnames = "21", ranges = "1-10000000", strand = "*"))
by_region
junctions
d
by_count <- junction_filter(junctions,
count_thresh = c("raw" = 5),
n_samp = c("raw" = 1),
types = NULL)
by_width <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
width_range = c(20, 1000),
types = NULL)
by_type <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = c("ambig_gene", "unannotated"))
by_region <- junction_filter(junctions,
count_thresh = NULL,
n_samp = NULL,
types = NULL,
regions = GRanges(seqnames = "21", ranges = "1-10000000", strand = "*"))
by_all <- junction_filter(junctions,
count_thresh = c("raw" = 5),
n_samp = c("raw" = 1),
width_range = c(20, 1000),
types = c("ambig_gene", "unannotated"),
regions = GRanges(seqnames = "21", ranges = "1-10000000", strand = "*"))
by_count
by_count %>%
SummarizedExperiment::assays() %>%
.[["raw"]]
by_count %>%
SummarizedExperiment::assays() %>%
.[["raw"]] %>%
apply(MARGIN = 1,
function(x){sum(x > 5)})
by_count %>%
SummarizedExperiment::assays() %>%
.[["raw"]] %>%
apply(MARGIN = 1,
function(x){(sum(x > 5)) > 1})
sum(x > 5)
by_count
by_count %>%
SummarizedExperiment::assays() %>%
.[["raw"]] %>%
apply(MARGIN = 1,
function(x){(sum(x > 5)) > 1})
sum(x > 5)
by_count %>%
SummarizedExperiment::assays() %>%
.[["raw"]] %>%
apply(MARGIN = 1,
function(x){(sum(x >= 5)) > 1})
by_count %>%
SummarizedExperiment::assays() %>%
.[["raw"]] %>%
apply(MARGIN = 1,
function(x){sum(x >= 5)})
by_count %>%
SummarizedExperiment::assays() %>%
.[["raw"]] %>%
apply(MARGIN = 1,
function(x){(sum(x >= 5)) >= 1})
expect_true(by_count %>%
SummarizedExperiment::assays() %>%
.[["raw"]] %>%
apply(MARGIN = 1,
function(x){(sum(x >= 5)) >= 1}) %>%
all())
# count
expect_false(junctions %>%
SummarizedExperiment::assays() %>%
.[["raw"]] %>%
apply(MARGIN = 1,
function(x){(sum(x >= 5)) >= 1}) %>%
all())
# width
expect_false(all(width(junctions) <= 1000 & width(junctions) >= 20))
expect_true(all(width(by_width) <= 1000 & width(junctions) >= 20))
expect_true(all(width(by_width) <= 1000 & width(by_width) >= 20))
# type
expect_true(any(mcols(by_type)[["type"]] %in% c("ambig_gene", "unannotated")))
# type
expect_false(any(mcols(by_type)[["type"]] %in% c("ambig_gene", "unannotated")))
expect_true(any(mcols(junctions)[["type"]] %in% c("ambig_gene", "unannotated")))
# region
findOverlaps(by_region, GRanges(seqnames = "21", ranges = "1-10000000", strand = "*"))
# region
length(findOverlaps(by_region, GRanges(seqnames = "21", ranges = "1-10000000", strand = "*")))
# region
expect_true(length(findOverlaps(by_region, GRanges(seqnames = "21", ranges = "1-10000000", strand = "*"))) == 0)
# region
expect_false(length(findOverlaps(junctions, GRanges(seqnames = "21", ranges = "1-10000000", strand = "*"))) == 0)
# region
expect_false(length(findOverlaps(junctions, GRanges(seqnames = "21", ranges = "1-10000000", strand = "*"))) > 0)
# region
expect_true(length(findOverlaps(junctions, GRanges(seqnames = "21", ranges = "1-10000000", strand = "*"))) > 0)
# all
expect_true(by_all %>%
SummarizedExperiment::assays() %>%
.[["raw"]] %>%
apply(MARGIN = 1,
function(x){(sum(x >= 5)) >= 1}) %>%
all())
expect_true(all(width(by_all) <= 1000 & width(by_all) >= 20))
by_all
expect_false(any(mcols(by_all)[["type"]] %in% c("ambig_gene", "unannotated")))
expect_true(length(findOverlaps(by_all, GRanges(seqnames = "21", ranges = "1-10000000", strand = "*"))) == 0)
library(dasper)
junction_filter(junctions_example)
junction_filter
devtools::load_all(".")
junction_filter(junctions_example)
junction_filter(junctions_example)
library(dasper)
junction_filter(junctions_example)
?junction_filter
source('~/packages/dasper/dev/04_update.R', echo=TRUE)
source('~/packages/dasper/dev/04_update.R', echo=TRUE)
source('~/packages/dasper/dev/04_update.R', echo=TRUE)
library(dasper)
?junction_filter
source('~/packages/dasper/dev/04_update.R', echo=TRUE)
?junction_filter
library(dasper)
rstudioapi::navigateToFile(usethis::proj_path(".github", "workflows", "check-bioc.yml"))
