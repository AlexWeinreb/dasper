% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coverage_process.R
\name{coverage_process}
\alias{coverage_process}
\title{Wrapper for processing coverage}
\usage{
coverage_process(
  junctions,
  ref,
  unannot_width = 20,
  coverage_paths_case,
  coverage_paths_control,
  coverage_chr_control = NULL,
  load_func = .coverage_load,
  bp_param = BiocParallel::SerialParam(),
  norm_const = 1,
  score_func = .zscore,
  ...
)
}
\arguments{
\item{junctions}{junction data as a
\link[SummarizedExperiment:RangedSummarizedExperiment-class]{RangedSummarizedExperiment-class}
object.}

\item{ref}{either path to gtf/gff3 or object of class \link[GenomicFeatures:TxDb-class]{TxDb-class}.}

\item{unannot_width}{integer scalar determining the width of the region to
obtain coverage from when the end of of a junction does not overlap an
existing exon.}

\item{coverage_paths_case}{paths to the BigWig files containing the
coverage of your case samples. Must be the same length and order to the
samples in \code{junctions}.}

\item{coverage_paths_control}{paths to the BigWig files}

\item{coverage_chr_control}{either "chr" or "no_chr", indicating the
chromosome format of control coverage data. Only used if you know the
chromosome format of the control BigWig files is different to that of
your junctions.}

\item{load_func}{a function to use to load coverage. Currently only for
internal use to increase testing speed.}

\item{bp_param}{a
\link[BiocParallel:BiocParallelParam-class]{BiocParallelParam-class} instance
denoting whether to parallelise the loading of coverage across BigWig files.}

\item{norm_const}{numeric scaler to add to the normalisation coverage to avoid dividing
by 0s and resulting NaN or Inf values.}

\item{score_func}{function to score junctions by their abnormality. By default,
will use a z-score but can be switched to a user-defined function. This
function must take as input an \code{x} and \code{y} argument, containing case and
control counts respectively. This must return a numeric vector equal to the
length of \code{x} with elements corresponding to a abnormality of each junction.}

\item{...}{additional arguments passed to \code{score_func}.}
}
\value{
\link[SummarizedExperiment:RangedSummarizedExperiment-class]{RangedSummarizedExperiment-class}
object containing junction data with coverage scores.
}
\description{
\code{coverage_process} wraps all "coverage_" prefixed functions in
\link{dasper}. This is designed to simplify processing of the coverage data
for those familiar or uninterested with the intermediates.
}
\examples{

# use Genomic state to load txdb (GENCODE v31)
ref <- GenomicState::GenomicStateHub(version = "31", genome = "hg38", filetype = "TxDb")[[1]]

junctions_processed <- junction_process(
    junctions_example,
    ref,
    count_thresh = c("raw" = 5),
    n_samp = c("raw" = 1),
    types = c("ambig_gene", "unannotated"),
)

# obtain path to example bw on recount2
url <- recount::download_study(
    project = "SRP012682",
    type = "samples",
    download = FALSE
)

bw_path <- dasper:::.file_cache(url[1])

junctions_w_coverage <- coverage_process(
    junctions_processed,
    ref,
    coverage_paths_case = rep(bw_path, 2),
    coverage_paths_control = rep(bw_path, 3)
)
}
\seealso{
Coverage processing functions
\code{\link{coverage_norm}()},
\code{\link{coverage_score}()}
}
\concept{coverage}
