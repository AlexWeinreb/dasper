% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/junction_load.R
\name{junction_load}
\alias{junction_load}
\title{Load junctions from patient and control RNA-seq data}
\usage{
junction_load(
  junction_paths,
  metadata = NULL,
  controls = rep(FALSE, length(junction_paths)),
  load_func = .load_STAR,
  chrs = NULL
)
}
\arguments{
\item{junction_paths}{file path(s) to junction data.}

\item{metadata}{dataframe containing sample metadata with rows in the same
order and corresponding to file path(s). Will be used as the \code{colData}
of the \code{\link[SummarizedExperiment]{SummarizedExperiment}} object.}

\item{controls}{either a logical vector of the same length as paths with
TRUEs labelling controls Or, "fibroblasts" representing the samples of
which GTEx tissue to use as controls. If left unchanged, by default will
assume all samples are patients.}

\item{load_func}{function to load in junctions. By default, requires STAR
formatted junctions (SJ.out). But this can be switched dependent on the
format of the user's junction data. Function must take as input a junction
path then return a dataframe with the columns "chr", "start", "end",
"strand" and "count".}

\item{chrs}{chrs chromosomes to keep. If NULL, no filter is applied.}
}
\value{
\code{\link[SummarizedExperiment]{SummarizedExperiment}} object
containing junction data.
}
\description{
\code{junction_load} loads in raw patient and control junction data and formats
it into a \code{\link[SummarizedExperiment]{SummarizedExperiment}} object.
Control samples can be user-inputted or selected from GTEx data publicly
released through the recount2 project
(\url{https://jhubiostatistics.shinyapps.io/recount/}) and downloaded
through snaptron (\url{http://snaptron.cs.jhu.edu/}). By default, \code{junction_load}
expects the junction data to be in STAR aligned format (SJ.out).
}
\examples{

\dontrun{
example_junctions_1_path <-
    system.file("extdata", "example_junctions_1.txt",
        "dasper",
        mustWork = TRUE
    )

junctions <-
    junction_load(
        junction_paths = c(example_junctions_1_path),
        metadata = dplyr::tibble(samp_id = c("example_1"))
    )

junctions
}

}
