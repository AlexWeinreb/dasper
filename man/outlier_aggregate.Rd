% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/outlier_aggregate.R
\name{outlier_aggregate}
\alias{outlier_aggregate}
\title{Aggregate outlier scores from per junction to cluster-level}
\usage{
outlier_aggregate(
  junctions,
  samp_id_col = "samp_id",
  bp_param = BiocParallel::SerialParam()
)
}
\arguments{
\item{junctions}{junction data as a
\link[SummarizedExperiment:RangedSummarizedExperiment-class]{RangedSummarizedExperiment-class}
object.}

\item{samp_id_col}{name of the column in the
\link[SummarizedExperiment:SummarizedExperiment-class]{SummarizedExperiment}
that details the sample ids.}

\item{bp_param}{a
\link[BiocParallel:BiocParallelParam-class]{BiocParallelParam-class} instance
denoting whether to parallelise the calculating of outlier scores across
samples.}
}
\value{
\code{DataFrame} with one row per cluster detailing each cluster's
associated junctions, outlier scores, ranks and genes.
}
\description{
\code{outlier_aggregate} will aggregate the outlier scores into a cluster-level.
It will then rank each cluster based on this aggregated score and annotate
each cluster with it's associated gene and transcript.
}
\examples{

if (.Platform$OS.type != "windows") {

    # tell reticulate to use the python3 install
    # if windows skip this step
    reticulate::use_python(Sys.which("python3"), required = TRUE)
}

if (!exists("ref")) {
    ref <- "ftp://ftp.ensembl.org/pub/release-100/gtf/homo_sapiens/Homo_sapiens.GRCh38.100.gtf.gz"
    ref <- GenomicFeatures::makeTxDbFromGFF(ref)
}

if (!exists("junctions_processed")) {
    junctions_processed <-
        junction_process(
            junctions_example,
            ref,
            count_thresh = c("raw" = 5),
            n_samp = c("raw" = 1),
            width_range = c(25, 1000000),
            types = c("ambig_gene", "unannotated"),
        )
    GenomeInfoDb::seqlevels(junctions_processed) <-
        paste0("chr", GenomeInfoDb::seqlevels(junctions_processed))
}

url <- recount::download_study(
    project = "SRP012682",
    type = "samples",
    download = FALSE
)
bw_path <- file.path(tempdir(), basename(url[1]))

if (!file.exists(bw_path)) {
    download.file(url[1], bw_path)
}

if (!exists("junctions_w_coverage")) {
    junctions_w_coverage <-
        coverage_process(
            junctions_processed,
            ref,
            unannot_width = 20,
            coverage_paths_case = rep(bw_path, 2),
            coverage_paths_control = rep(bw_path, 3),
            norm_const = 2,
            score_func = .zscore,
            sd_const = 0.02
        )
}

if (!exists("junctions_w_outliers")) {
    junctions_w_outliers <- outlier_detect(junctions_w_coverage)
}

outlier_scores <- outlier_aggregate(junctions_w_outliers)
}
\seealso{
Outlier processing functions
\code{\link{outlier_detect}()},
\code{\link{outlier_process}()}
}
\concept{outlier}
